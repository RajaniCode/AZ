# Customize the user account data

1. Add the user registration files to be modified to the project:

.NET Core CLI
dotnet aspnet-codegenerator identity \
    --dbContext ContosoPetsAuth \
    --files "Account.Manage.EnableAuthenticator;Account.Manage.Index;Account.Register" \
    --userClass ContosoPetsUser \
    --force

In the preceding command:
• The --dbContext option provides the tool with knowledge of the existing DbContext-derived class named ContosoPetsAuth.
• The --files option specifies a semicolon-delimited list of unique files to be added to the Identity area.
• The --userClass option results in the creation of an IdentityUser-derived class named ContosoPetsUser.
• The --force option causes existing files in the Identity area to be overwritten.

Tip
Run the following command from the project root to view valid values for the --files option:
.NET Core CLI
dotnet aspnet-codegenerator identity --listFiles

$ dotnet aspnet-codegenerator identity \
    --dbContext ContosoPetsAuth \
    --files "Account.Manage.EnableAuthenticator;Account.Manage.Index;Account.Register" \
    --userClass ContosoPetsUser \
    --force
$ dotnet aspnet-codegenerator identity --listFiles
[
Requesting a Cloud Shell.Succeeded.
Connecting terminal...

Welcome to Azure Cloud Shell

Type "az" to use Azure CLI
Type "help" to learn about Cloud Shell

The following variables are used in this module:
webAppUrl: https://webapp323652297.azurewebsites.net
dbConnectionString: Data Source=azsql323652297.database.windows.net;Initial Catalog=ContosoPetsAuth;Connect Timeout=30;Encrypt=True;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False
sqlUsername: SqlUser
sqlPassword: Pass.30103.word

db is an alias for sqlcmd -U SqlUser -P Pass.30103.word -S azsql323652297.database.windows.net -d ContosoPetsAuth

rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ dotnet aspnet-codegenerator identity \
>     --dbContext ContosoPetsAuth \
>     --files "Account.Manage.EnableAuthenticator;Account.Manage.Index;Account.Register" \
>     --userClass ContosoPetsUser \
>     --force
Building project ...
Finding the generator 'identity'...
Running the generator 'identity'...
RunTime 00:01:25.97
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

The following files are added to the Areas/Identity directory:
• Data/
  • ContosoPetsUser.cs
• Pages/
  • _ViewImports.cshtml
  • Account/
    • _ViewImports.cshtml
    • Register.cshtml
    • Register.cshtml.cs
    • Manage/
      • _ManageNav.cshtml
      • _ViewImports.cshtml
      • EnableAuthenticator.cshtml
      • EnableAuthenticator.cshtml.cs
      • Index.cshtml
      • Index.cshtml.cs
      • ManageNavPages.cs
Additionally, the Data/ContosoPetsAuth.cs file, which existed before running the preceding command, was overwritten because the --force option was used. The ContosoPetsAuth class declaration now references the newly created user type of ContosoPetsUser:

C#
public class ContosoPetsAuth : IdentityDbContext<ContosoPetsUser>

The EnableAuthenticator Razor page was scaffolded, though it won't be modified until later in the module.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Data/ContosoPetsAuth.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace ContosoPets.Ui.Areas.Identity.Data
{
    public class ContosoPetsAuth : IdentityDbContext<ContosoPetsUser>
    {
        public ContosoPetsAuth(DbContextOptions<ContosoPetsAuth> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            // Customize the ASP.NET Identity model and override the defaults if needed.
            // For example, you can rename the ASP.NET Identity table names and more.
            // Add your customizations after calling base.OnModelCreating(builder);
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

2. In the Configure method of Areas/Identity/IdentityHostingStartup.cs, the call to AddDefaultIdentity needs to be made aware of the new Identity user type. Incorporate the following highlighted change, and save the file.

C#
services.AddDefaultIdentity<ContosoPetsUser>()
    .AddDefaultUI()
    .AddEntityFrameworkStores<ContosoPetsAuth>();
[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/IdentityHostingStartup.cs
using System;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Data.SqlClient;

[assembly: HostingStartup(typeof(ContosoPets.Ui.Areas.Identity.IdentityHostingStartup))]
namespace ContosoPets.Ui.Areas.Identity
{
    public class IdentityHostingStartup : IHostingStartup
    {
        public void Configure(IWebHostBuilder builder)
        {
            builder.ConfigureServices((context, services) => {
                var connBuilder = new SqlConnectionStringBuilder(                    context.Configuration.GetConnectionString("ContosoPetsAuthConnection"))
                {
                    UserID = context.Configuration["DbUsername"],
                    Password = context.Configuration["DbPassword"]
                };

                services.AddDbContext<ContosoPetsAuth>(options =>
                    options.UseSqlServer(connBuilder.ConnectionString));

                services.AddDefaultIdentity<IdentityUser>()
                    .AddDefaultUI()
                    .AddEntityFrameworkStores<ContosoPetsAuth>();
            });
        }
    }
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/IdentityHostingStartup.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/IdentityHostingStartup.cs
using System;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Data.SqlClient;

[assembly: HostingStartup(typeof(ContosoPets.Ui.Areas.Identity.IdentityHostingStartup))]
namespace ContosoPets.Ui.Areas.Identity
{
    public class IdentityHostingStartup : IHostingStartup
    {
        public void Configure(IWebHostBuilder builder)
        {
            builder.ConfigureServices((context, services) => {
                var connBuilder = new SqlConnectionStringBuilder(
                    context.Configuration.GetConnectionString("ContosoPetsAuthConnection"))
                {
                    UserID = context.Configuration["DbUsername"],
                    Password = context.Configuration["DbPassword"]
                };

                services.AddDbContext<ContosoPetsAuth>(options =>
                    options.UseSqlServer(connBuilder.ConnectionString));

                services.AddDefaultIdentity<ContosoPetsUser>()
                    .AddDefaultUI()
                    .AddEntityFrameworkStores<ContosoPetsAuth>();
            });
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]


3. Update Pages/Shared/_LoginPartial.cshtml to incorporate the following highlighted changes. Save your changes.

CSHTML
@using Microsoft.AspNetCore.Identity
@using ContosoPets.Ui.Areas.Identity.Data
@inject SignInManager<ContosoPetsUser> SignInManager
@inject UserManager<ContosoPetsUser> UserManager

<ul class="navbar-nav">

The preceding changes update the user type passed to both SignInManager<T> and UserManager<T> in the @inject directives. Instead of the default IdentityUser type, ContosoPetsUser user is now referenced. The @using directive was added to resolve the ContosoPetsUser references.

Pages/Shared/_LoginPartial.cshtml is physically located outside of the Identity area. Consequently, the file wasn't updated automatically by the scaffold tool. The appropriate changes had be made manually.

Tip
As an alternative to manually editing the _LoginPartial.cshtml file, it can be deleted prior to running the scaffold tool. The _LoginPartial.cshtml file will be recreated with references to the new ContosoPetsUser class.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Pages/Shared/_LoginPartial.cshtml
@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Pages/Shared/_LoginPartial.cshtml
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Pages/Shared/_LoginPartial.cshtml
@using Microsoft.AspNetCore.Identity
@using ContosoPets.Ui.Areas.Identity.Data
@inject SignInManager<ContosoPetsUser> SignInManager
@inject UserManager<ContosoPetsUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

4. Update Areas/Identity/Data/ContosoPetsUser.cs to support storage and retrieval of the additional user profile data. Make the following changes:

a. Add the FirstName and LastName properties:

C#
public class ContosoPetsUser : IdentityUser
{
    [Required]
    [MaxLength(100)]
    public string FirstName { get; set; }

    [Required]
    [MaxLength(100)]
    public string LastName { get; set; }
}

The properties in the preceding snippet represent additional columns to be created in the underlying AspNetUsers table. Both properties are required and are therefore annotated with the [Required] attribute. The [Required] attribute also results in a non-null constraint in the underlying database table column. Additionally, the [MaxLength] attribute indicates that a maximum length of 100 characters is allowed. The underlying table column's data type is defined accordingly.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Data/ContosoPetsUser.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;

namespace ContosoPets.Ui.Areas.Identity.Data
{
    // Add profile data for application users by adding properties to the ContosoPetsUser class
    public class ContosoPetsUser : IdentityUser
    {
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Data/ContosoPetsUser.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Data/ContosoPetsUser.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;

namespace ContosoPets.Ui.Areas.Identity.Data
{
    // Add profile data for application users by adding properties to the ContosoPetsUser class
    public class ContosoPetsUser : IdentityUser
    {
         [Required]
         [MaxLength(100)]
         public string FirstName { get; set; }

         [Required]
         [MaxLength(100)]
         public string LastName { get; set; }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

b. Add the following using statement to the top of the file. Save your changes.

C#
using System.ComponentModel.DataAnnotations;

The preceding code resolves the data annotation attributes applied to the FirstName and LastName properties.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Data/ContosoPetsUser.cs
using System;
using System.Collections.Generic;using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;

namespace ContosoPets.Ui.Areas.Identity.Data
{
    // Add profile data for application users by adding properties to the ContosoPetsUser class
    public class ContosoPetsUser : IdentityUser
    {
         [Required]
         [MaxLength(100)]
         public string FirstName { get; set; }

         [Required]
         [MaxLength(100)]
         public string LastName { get; set; }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Data/ContosoPetsUser.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Data/ContosoPetsUser.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using System.ComponentModel.DataAnnotations;

namespace ContosoPets.Ui.Areas.Identity.Data
{
    // Add profile data for application users by adding properties to the ContosoPetsUser class
    public class ContosoPetsUser : IdentityUser
    {
         [Required]
         [MaxLength(100)]
         public string FirstName { get; set; }

         [Required]
         [MaxLength(100)]
         public string LastName { get; set; }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

# Update the database
1. Create and apply an EF Core migration to update the underlying data store:
.NET Core CLI
dotnet ef migrations add UpdateUser && \
    dotnet ef database update

The UpdateUser EF Core migration applied a DDL change script to the AspNetUsers table's schema. Specifically, FirstName and LastName columns were added, as seen in the following migration output excerpt:

Console
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
    Executed DbCommand (37ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
    ALTER TABLE [AspNetUsers] ADD [FirstName] nvarchar(100) NOT NULL DEFAULT N'';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
    Executed DbCommand (36ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
    ALTER TABLE [AspNetUsers] ADD [LastName] nvarchar(100) NOT NULL DEFAULT N'';

$ dotnet ef migrations add UpdateUser && \
    dotnet ef database update
[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ dotnet ef migrations add UpdateUser && \
>     dotnet ef database update
Build started...
Build succeeded.
info: Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 3.1.3 initialized 'ContosoPetsAuth' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
Done. To undo this action, use 'ef migrations remove'
Build started...
Build succeeded.
info: Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 3.1.3 initialized 'ContosoPetsAuth' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (184ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (181ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (170ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (170ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT OBJECT_ID(N'[__EFMigrationsHistory]');
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (170ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT [MigrationId], [ProductVersion]
      FROM [__EFMigrationsHistory]
      ORDER BY [MigrationId];
info: Microsoft.EntityFrameworkCore.Migrations[20402]
      Applying migration '20200729115336_UpdateUser'.
Applying migration '20200729115336_UpdateUser'.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (172ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      ALTER TABLE [AspNetUsers] ADD [FirstName] nvarchar(100) NOT NULL DEFAULT N'';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (170ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      ALTER TABLE [AspNetUsers] ADD [LastName] nvarchar(100) NOT NULL DEFAULT N'';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (169ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
      VALUES (N'20200729115336_UpdateUser', N'3.1.3');
Done.
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

Complete the following steps to analyze the impact of the UpdateUser EF Core migration on the AspNetUsers table's schema. You'll gain an understanding of the impact extending the Identity data model has on the underlying data store.

2. Run the following command to view the table schema:

Bash
db -Q "SELECT COLUMN_NAME, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH AS MAX_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='AspNetUsers'" -Y 20

The following output displays:
Console
COLUMN_NAME          IS_NULLABLE DATA_TYPE            MAX_LENGTH
-------------------- ----------- -------------------- -----------
Id                   NO          nvarchar                     450
UserName             YES         nvarchar                     256
NormalizedUserName   YES         nvarchar                     256
Email                YES         nvarchar                     256
NormalizedEmail      YES         nvarchar                     256
EmailConfirmed       NO          bit                         NULL
PasswordHash         YES         nvarchar                      -1
SecurityStamp        YES         nvarchar                      -1
ConcurrencyStamp     YES         nvarchar                      -1
PhoneNumber          YES         nvarchar                      -1
PhoneNumberConfirmed NO          bit                         NULL
TwoFactorEnabled     NO          bit                         NULL
LockoutEnd           YES         datetimeoffset              NULL
LockoutEnabled       NO          bit                         NULL
AccessFailedCount    NO          int                         NULL
FirstName            NO          nvarchar                     100
LastName             NO          nvarchar                     100

The FirstName and LastName properties in the ContosoPetsUser class correspond to the FirstName and LastName columns in the preceding output. A data type of nvarchar(100) was assigned to each of the two columns because of the [MaxLength(100)] attributes. The non-null constraint was added because of the [Required] attributes. Existing rows show empty strings in the new columns.

$ db -Q "SELECT COLUMN_NAME, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH AS MAX_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='AspNetUsers'" -Y 20
[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ db -Q "SELECT COLUMN_NAME, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH AS MAX_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='AspNetUsers'" -Y 20
COLUMN_NAME          IS_NULLABLE DATA_TYPE            MAX_LENGTH
-------------------- ----------- -------------------- -----------
Id                   NO          nvarchar                     450
UserName             YES         nvarchar                     256
NormalizedUserName   YES         nvarchar                     256
Email                YES         nvarchar                     256
NormalizedEmail      YES         nvarchar                     256
EmailConfirmed       NO          bit                         NULL
PasswordHash         YES         nvarchar                      -1
SecurityStamp        YES         nvarchar                      -1
ConcurrencyStamp     YES         nvarchar                      -1
PhoneNumber          YES         nvarchar                      -1
PhoneNumberConfirmed NO          bit                         NULL
TwoFactorEnabled     NO          bit                         NULL
LockoutEnd           YES         datetimeoffset              NULL
LockoutEnabled       NO          bit                         NULL
AccessFailedCount    NO          int                         NULL
FirstName            NO          nvarchar                     100
LastName             NO          nvarchar                     100

(17 rows affected)
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

3. Run the following command to view the primary key for the table:

Bash
db -i $setupWorkingDirectory/list-aspnetusers-pk.sql -Y 15

The following output shows that the Id column is the unique identifier for a user account:

Console
Table           Column          Primary key
--------------- --------------- ---------------
AspNetUsers     Id              PK_AspNetUsers

$ db -i $setupWorkingDirectory/list-aspnetusers-pk.sql -Y 15

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ db -i $setupWorkingDirectory/list-aspnetusers-pk.sql -Y 15
Table           Column          Primary key
--------------- --------------- ---------------
AspNetUsers     Id              PK_AspNetUsers
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

# Customize the user registration form
1. In Areas/Identity/Pages/Account/Register.cshtml, add the following highlighted markup:

CSHTML
<form asp-route-returnUrl="@Model.ReturnUrl" method="post">
    <h4>Create a new account.</h4>
    <hr />
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Input.FirstName"></label>
        <input asp-for="Input.FirstName" class="form-control" />
        <span asp-validation-for="Input.FirstName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Input.LastName"></label>
        <input asp-for="Input.LastName" class="form-control" />
        <span asp-validation-for="Input.LastName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Input.Email"></label>
        <input asp-for="Input.Email" class="form-control" />
        <span asp-validation-for="Input.Email" class="text-danger"></span>
    </div>

With the preceding markup, First name and Last name text boxes are added to the user registration form.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Register.cshtml
@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h4>Create a new account.</h4>
            <hr />
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Input.Email"></label>
                <input asp-for="Input.Email" class="form-control" />
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-group">                <label asp-for="Input.Password"></label>
                <input asp-for="Input.Password" class="form-control" />
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.ConfirmPassword"></label>
                <input asp-for="Input.ConfirmPassword" class="form-control" />
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h4>Use another service to register.</h4>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                            for details on setting up this ASP.NET application tosupport logging in via external services.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins)
                                {
                                    <button type="submit" class="btn btn-primary"name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Pages/Account/Register.cshtml
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Register.cshtml
@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h4>Create a new account.</h4>
            <hr />
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Input.FirstName"></label>
                <input asp-for="Input.FirstName" class="form-control" />
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.LastName"></label>
                <input asp-for="Input.LastName" class="form-control" />
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Email"></label>
                <input asp-for="Input.Email" class="form-control" />
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Password"></label>
                <input asp-for="Input.Password" class="form-control" />
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.ConfirmPassword"></label>
                <input asp-for="Input.ConfirmPassword" class="form-control" />
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h4>Use another service to register.</h4>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                            for details on setting up this ASP.NET application tosupport logging in via external services.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins)
                                {
                                    <button type="submit" class="btn btn-primary"name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

2. In Areas/Identity/Pages/Account/Register.cshtml.cs, add support for the name text boxes.

a. Add the FirstName and LastName properties to the InputModel nested class:

C#
public class InputModel
{
    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
    [Display(Name = "First name")]
    public string FirstName { get; set; }

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
    [Display(Name = "Last name")]
    public string LastName { get; set; }

    [Required]
    [EmailAddress]
    [Display(Name = "Email")]
    public string Email { get; set; }

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    public string Password { get; set; }

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; }
}

The [Display] attributes define the label text to be associated with the text boxes.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Register.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account
{
    [AllowAnonymous]    public class RegisterModel : PageModel
    {
        private readonly SignInManager<ContosoPetsUser> _signInManager;
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;

        public RegisterModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public class InputModel
        {
            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = new ContosoPetsUser { UserName = Input.Email, Email = Input.Email };
                var result = await _userManager.CreateAsync(user, Input.Password);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");

                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { area = "Identity", userId = user.Id, code =code },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email= Input.Email });
                    }
                    else
                    {
                        await _signInManager.SignInAsync(user, isPersistent: false);
                        return LocalRedirect(returnUrl);
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Pages/Account/Register.cshtml.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Register.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    public class RegisterModel : PageModel
    {
        private readonly SignInManager<ContosoPetsUser> _signInManager;
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;

        public RegisterModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public class InputModel
        {
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "First name")]
            public string FirstName { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "Last name")]
            public string LastName { get; set; }

            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = new ContosoPetsUser { UserName = Input.Email, Email = Input.Email };
                var result = await _userManager.CreateAsync(user, Input.Password);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");

                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { area = "Identity", userId = user.Id, code =code },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email= Input.Email });
                    }
                    else
                    {
                        await _signInManager.SignInAsync(user, isPersistent: false);
                        return LocalRedirect(returnUrl);
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

b. Modify the OnPostAsync method to set the FirstName and LastName properties on the ContosoPetsUser object. Make the following highlighted changes:

C#
public async Task<IActionResult> OnPostAsync(string returnUrl = null)
{
    returnUrl = returnUrl ?? Url.Content("~/");
    if (ModelState.IsValid)
    {
        var user = new ContosoPetsUser
        {
            FirstName = Input.FirstName,
            LastName = Input.LastName,
            UserName = Input.Email,
            Email = Input.Email,
        };
        var result = await _userManager.CreateAsync(user, Input.Password);
        if (result.Succeeded)
        {

The preceding change sets the FirstName and LastName properties to the user input from the registration form.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Register.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account
{
    [AllowAnonymous]    public class RegisterModel : PageModel
    {
        private readonly SignInManager<ContosoPetsUser> _signInManager;
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;

        public RegisterModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public class InputModel
        {
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "First name")]
            public string FirstName { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "Last name")]
            public string LastName { get; set; }

            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = new ContosoPetsUser { UserName = Input.Email, Email = Input.Email };
                var result = await _userManager.CreateAsync(user, Input.Password);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");

                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { area = "Identity", userId = user.Id, code =code },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email= Input.Email });
                    }
                    else
                    {
                        await _signInManager.SignInAsync(user, isPersistent: false);
                        return LocalRedirect(returnUrl);
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Pages/Account/Register.cshtml.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Register.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    public class RegisterModel : PageModel
    {
        private readonly SignInManager<ContosoPetsUser> _signInManager;
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        private readonly IEmailSender _emailSender;

        public RegisterModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            _emailSender = emailSender;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public class InputModel
        {
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "First name")]
            public string FirstName { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "Last name")]
            public string LastName { get; set; }

            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = new ContosoPetsUser
                {
                    FirstName = Input.FirstName,
                    LastName = Input.LastName,
                    UserName = Input.Email,
                    Email = Input.Email,
                };
                var result = await _userManager.CreateAsync(user, Input.Password);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");

                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { area = "Identity", userId = user.Id, code =code },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email= Input.Email });
                    }
                    else
                    {
                        await _signInManager.SignInAsync(user, isPersistent: false);
                        return LocalRedirect(returnUrl);
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

Customize the site header
Update Pages/Shared/_LoginPartial.cshtml to display the first and last name collected during user registration. The highlighted lines in the following snippet are needed:

CSHTML
@using Microsoft.AspNetCore.Identity
@using ContosoPets.Ui.Areas.Identity.Data
@inject SignInManager<ContosoPetsUser> SignInManager
@inject UserManager<ContosoPetsUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    ContosoPetsUser user = await UserManager.GetUserAsync(User);
    var fullName = $"{user.FirstName} {user.LastName}";

    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello, @fullName!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Pages/Shared/_LoginPartial.cshtml
@using Microsoft.AspNetCore.Identity
@using ContosoPets.Ui.Areas.Identity.Data
@inject SignInManager<ContosoPetsUser> SignInManager
@inject UserManager<ContosoPetsUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Pages/Shared/_LoginPartial.cshtml
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Pages/Shared/_LoginPartial.cshtml
@using Microsoft.AspNetCore.Identity
@using ContosoPets.Ui.Areas.Identity.Data
@inject SignInManager<ContosoPetsUser> SignInManager
@inject UserManager<ContosoPetsUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    ContosoPetsUser user = await UserManager.GetUserAsync(User);
    var fullName = $"{user.FirstName} {user.LastName}";

    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello, @fullName!</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

# Customize the profile management form

1. In Areas/Identity/Pages/Account/Manage/Index.cshtml, add the following highlighted markup. Save your changes.

CSHTML
<form id="profile-form" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Input.FirstName"></label>
        <input asp-for="Input.FirstName" class="form-control" />
        <span asp-validation-for="Input.FirstName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Input.LastName"></label>
        <input asp-for="Input.LastName" class="form-control" />
        <span asp-validation-for="Input.LastName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Username"></label>
        <input asp-for="Username" class="form-control" disabled />
    </div>

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Manage/Index.cshtml
@page
@model IndexModel
@{
    ViewData["Title"] = "Profile";
    ViewData["ActivePage"] = ManageNavPages.Index;
}

<h4>@ViewData["Title"]</h4>
<partial name="_StatusMessage" model="Model.StatusMessage" />
<div class="row">
    <div class="col-md-6">
        <form id="profile-form" method="post">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Username"></label>
                <input asp-for="Username" class="form-control" disabled />
            </div>
            <div class="form-group">
                <label asp-for="Input.PhoneNumber"></label>
                <input asp-for="Input.PhoneNumber" class="form-control" />                <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
            </div>
            <button id="update-profile-button" type="submit" class="btn btn-primary">Save</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Pages/Account/Manage/Index.cshtml
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Manage/Index.cshtml
@page
@model IndexModel
@{
    ViewData["Title"] = "Profile";
    ViewData["ActivePage"] = ManageNavPages.Index;
}

<h4>@ViewData["Title"]</h4>
<partial name="_StatusMessage" model="Model.StatusMessage" />
<div class="row">
    <div class="col-md-6">
        <form id="profile-form" method="post">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Input.FirstName"></label>
                <input asp-for="Input.FirstName" class="form-control" />
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.LastName"></label>
                <input asp-for="Input.LastName" class="form-control" />
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Username"></label>
                <input asp-for="Username" class="form-control" disabled />
            </div>
            <div class="form-group">
                <label asp-for="Input.PhoneNumber"></label>
                <input asp-for="Input.PhoneNumber" class="form-control" />
                <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
            </div>
            <button id="update-profile-button" type="submit" class="btn btn-primary">Save</button>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

2. In Areas/Identity/Pages/Account/Manage/Index.cshtml.cs, make the following changes to support the name text boxes.

a. Add the FirstName and LastName properties to the InputModel nested class:

C#
public class InputModel
{
    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
    [Display(Name = "First name")]
    public string FirstName { get; set; }

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
    [Display(Name = "Last name")]
    public string LastName { get; set; }

    [Phone]
    [Display(Name = "Phone number")]
    public string PhoneNumber { get; set; }
}

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Manage/Index.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account.Manage
{
    public partial class IndexModel : PageModel
    {
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly SignInManager<ContosoPetsUser> _signInManager;

        public IndexModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager)        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        public string Username { get; set; }

        [TempData]
        public string StatusMessage { get; set; }

        [BindProperty]
        public InputModel Input { get; set; }

        public class InputModel
        {
            [Phone]
            [Display(Name = "Phone number")]
            public string PhoneNumber { get; set; }
        }

        private async Task LoadAsync(ContosoPetsUser user)
        {
            var userName = await _userManager.GetUserNameAsync(user);
            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);

            Username = userName;

            Input = new InputModel
            {
                PhoneNumber = phoneNumber
            };
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await LoadAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }

            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
            if (Input.PhoneNumber != phoneNumber)
            {
                var setPhoneResult = await _userManager.SetPhoneNumberAsync(user,Input.PhoneNumber);
                if (!setPhoneResult.Succeeded)
                {
                    var userId = await _userManager.GetUserIdAsync(user);
                    throw new InvalidOperationException($"Unexpected error occurred setting phone number for user with ID '{userId}'.");
                }
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Your profile has been updated";
            return RedirectToPage();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Pages/Account/Manage/Index.cshtml.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Manage/Index.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account.Manage
{
    public partial class IndexModel : PageModel
    {
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly SignInManager<ContosoPetsUser> _signInManager;

        public IndexModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        public string Username { get; set; }

        [TempData]
        public string StatusMessage { get; set; }

        [BindProperty]
        public InputModel Input { get; set; }

        public class InputModel
        {
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "First name")]
            public string FirstName { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "Last name")]
            public string LastName { get; set; }

            [Phone]
            [Display(Name = "Phone number")]
            public string PhoneNumber { get; set; }
        }

        private async Task LoadAsync(ContosoPetsUser user)
        {
            var userName = await _userManager.GetUserNameAsync(user);
            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);

            Username = userName;

            Input = new InputModel
            {
                PhoneNumber = phoneNumber
            };
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await LoadAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }

            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
            if (Input.PhoneNumber != phoneNumber)
            {
                var setPhoneResult = await _userManager.SetPhoneNumberAsync(user,Input.PhoneNumber);
                if (!setPhoneResult.Succeeded)
                {
                    var userId = await _userManager.GetUserIdAsync(user);
                    throw new InvalidOperationException($"Unexpected error occurred setting phone number for user with ID '{userId}'.");
                }
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Your profile has been updated";
            return RedirectToPage();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

b. Incorporate the highlighted changes in the LoadAsync method:

C#
private async Task LoadAsync(ContosoPetsUser user)
{
    var userName = await _userManager.GetUserNameAsync(user);
    var phoneNumber = await _userManager.GetPhoneNumberAsync(user);

    Username = userName;

    Input = new InputModel
    {
        PhoneNumber = phoneNumber,
        FirstName = user.FirstName,
        LastName = user.LastName,
    };
}

The preceding code supports retrieving the first and last names for display in the corresponding text boxes of the profile management form.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Pages/Account/Manage/Index.cshtml.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Manage/Index.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account.Manage
{
    public partial class IndexModel : PageModel
    {
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly SignInManager<ContosoPetsUser> _signInManager;

        public IndexModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        public string Username { get; set; }

        [TempData]
        public string StatusMessage { get; set; }

        [BindProperty]
        public InputModel Input { get; set; }

        public class InputModel
        {
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "First name")]
            public string FirstName { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "Last name")]
            public string LastName { get; set; }

            [Phone]
            [Display(Name = "Phone number")]
            public string PhoneNumber { get; set; }
        }

        private async Task LoadAsync(ContosoPetsUser user)
        {
            var userName = await _userManager.GetUserNameAsync(user);
            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);

            Username = userName;

            Input = new InputModel
            {
                PhoneNumber = phoneNumber,
                FirstName = user.FirstName,
                LastName = user.LastName,
            };
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await LoadAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }

            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
            if (Input.PhoneNumber != phoneNumber)
            {
                var setPhoneResult = await _userManager.SetPhoneNumberAsync(user,Input.PhoneNumber);
                if (!setPhoneResult.Succeeded)
                {
                    var userId = await _userManager.GetUserIdAsync(user);
                    throw new InvalidOperationException($"Unexpected error occurred setting phone number for user with ID '{userId}'.");
                }
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Your profile has been updated";
            return RedirectToPage();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

c. Incorporate the highlighted changes in the OnPostAsync method. Save your changes.

C#
public async Task<IActionResult> OnPostAsync()
{
    var user = await _userManager.GetUserAsync(User);
    if (user == null)
    {
        return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
    }

    if (!ModelState.IsValid)
    {
        await LoadAsync(user);
        return Page();
    }

    user.FirstName = Input.FirstName;
    user.LastName = Input.LastName;
    await _userManager.UpdateAsync(user);

    var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
    if (Input.PhoneNumber != phoneNumber)
    {
        var setPhoneResult = await _userManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
        if (!setPhoneResult.Succeeded)
        {
            var userId = await _userManager.GetUserIdAsync(user);
            throw new InvalidOperationException($"Unexpected error occurred setting phone number for user with ID '{userId}'.");
        }
    }

    await _signInManager.RefreshSignInAsync(user);
    StatusMessage = "Your profile has been updated";
    return RedirectToPage();
}

The preceding code supports updating the first and last names in the database's AspNetUsers table.

[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ vim Areas/Identity/Pages/Account/Manage/Index.cshtml.cs
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ cat Areas/Identity/Pages/Account/Manage/Index.cshtml.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using ContosoPets.Ui.Areas.Identity.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace ContosoPets.Ui.Areas.Identity.Pages.Account.Manage
{
    public partial class IndexModel : PageModel
    {
        private readonly UserManager<ContosoPetsUser> _userManager;
        private readonly SignInManager<ContosoPetsUser> _signInManager;

        public IndexModel(
            UserManager<ContosoPetsUser> userManager,
            SignInManager<ContosoPetsUser> signInManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
        }

        public string Username { get; set; }

        [TempData]
        public string StatusMessage { get; set; }

        [BindProperty]
        public InputModel Input { get; set; }

        public class InputModel
        {
            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "First name")]
            public string FirstName { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
            [Display(Name = "Last name")]
            public string LastName { get; set; }

            [Phone]
            [Display(Name = "Phone number")]
            public string PhoneNumber { get; set; }
        }

        private async Task LoadAsync(ContosoPetsUser user)
        {
            var userName = await _userManager.GetUserNameAsync(user);
            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);

            Username = userName;

            Input = new InputModel
            {
                PhoneNumber = phoneNumber,
                FirstName = user.FirstName,
                LastName = user.LastName,
            };
        }

        public async Task<IActionResult> OnGetAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            await LoadAsync(user);
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            if (!ModelState.IsValid)
            {
                await LoadAsync(user);
                return Page();
            }

            user.FirstName = Input.FirstName;
            user.LastName = Input.LastName;
            await _userManager.UpdateAsync(user);

            var phoneNumber = await _userManager.GetPhoneNumberAsync(user);
            if (Input.PhoneNumber != phoneNumber)
            {
                var setPhoneResult = await _userManager.SetPhoneNumberAsync(user,Input.PhoneNumber);
                if (!setPhoneResult.Succeeded)
                {
                    var userId = await _userManager.GetUserIdAsync(user);
                    throw new InvalidOperationException($"Unexpected error occurred setting phone number for user with ID '{userId}'.");
                }
            }

            await _signInManager.RefreshSignInAsync(user);
            StatusMessage = "Your profile has been updated";
            return RedirectToPage();
        }
    }
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]


# Build, deploy, and test
1. Run the following command to build the app:

.NET Core CLI
dotnet build --no-restore

The --no-restore option is included because no NuGet packages were added since the last build. The build process bypasses restoration of NuGet packages and succeeds with no warnings. If the build fails, check the output for troubleshooting information.

$ dotnet build --no-restore
[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ dotnet build --no-restore
Microsoft (R) Build Engine version 16.5.0+d4cbfca49 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  ContosoPets.Ui -> /home/rajani_net/aspnet-learn/src/ContosoPets.Ui/bin/Debug/netcoreapp3.1/ContosoPets.Ui.dll
  ContosoPets.Ui -> /home/rajani_net/aspnet-learn/src/ContosoPets.Ui/bin/Debug/netcoreapp3.1/ContosoPets.Ui.Views.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:05.92
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

2. Deploy the app to Azure App Service by running the following command:

Azure CLI
az webapp up

$ az webapp up
[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ az webapp up
Webapp webapp323652297 already exists. The command will deploy contents to the existing app.
Creating zip with contents of dir /home/rajani_net/aspnet-learn/src/ContosoPets.Ui ...
Getting scm site credentials for zip deployment
Starting zip deployment. This operation can take a while to complete ...
Deployment endpoint responded with status code 202
You can launch the app at http://webapp323652297.azurewebsites.net
{
  "URL": "http://webapp323652297.azurewebsites.net",
  "appserviceplan": "plan323652297",
  "location": "centralus",
  "name": "webapp323652297",
  "os": "Windows",
  "resourcegroup": "learn-ec1568de-3216-4576-94a9-dba55707bfba",
  "runtime_version": "dotnetcore|3.1",
  "runtime_version_detected": "3.1",
  "sku": "FREE",
  "src_path": "//home//rajani_net//aspnet-learn//src//ContosoPets.Ui"
}
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

3. In your browser, navigate to the app. Select Logout if you're still logged in.

Tip
If you need the URL to your app, display it with the following command:

Bash
echo $webAppUrl

$ echo $webAppUrl
[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ echo $webAppUrl
https://webapp323652297.azurewebsites.net
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

4. Select Register and use the updated form to register a new user.

Note
The validation constraints on the First name and Last name fields reflect the data annotations on the FirstName and LastName properties of InputModel.

After registering, you're redirected to the homepage. The app's header now contains Hello, [First name] [Last name]!.

5. Run the following command to confirm that the first and last names are stored in the database:

Bash
db -Q "SELECT UserName, Email, FirstName, LastName FROM dbo.AspNetUsers" -Y 25

A variation of the following output displays:

Console
UserName                  Email                     FirstName                 LastName
------------------------- ------------------------- ------------------------- -------------------------
kai.klein@contoso.com     kai.klein@contoso.com
jana.heinrich@contoso.com jana.heinrich@contoso.com Jana                      Heinrich
The first user registered prior to adding FirstName and LastName to the schema. Consequently, the associated AspNetUsers table record doesn't have data in those columns.

$ db -Q "SELECT UserName, Email, FirstName, LastName FROM dbo.AspNetUsers" -Y 25
[
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$ db -Q "SELECT UserName, Email, FirstName, LastName FROM dbo.AspNetUsers" -Y 25
UserName                  Email                     FirstName                 LastName
------------------------- ------------------------- ------------------------- -------------------------
name@example.com          name@example.com          First Name                Last Name

(1 rows affected)
rajani_net@Azure:~/aspnet-learn/src/ContosoPets.Ui$
]

# Test the changes to the profile management form
In the web app, log in with the first user you created.

Click the Hello, ! link to navigate to the profile management form.

 Note

The link doesn't display correctly because the AspNetUsers table's row for this user doesn't contain values for FirstName and LastName.

Enter valid values for First name and Last name. Select Save.

The app's header updates to Hello, [First name] [Last name]!.