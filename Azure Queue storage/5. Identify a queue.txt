Note
You can create the client application on your local computer if you have .NET Core installed, or directly in the Cloud Shell environment.

# Create the application
1. Use the dotnet new command to create a new console app with the name QueueApp. You can type commands into the Cloud Shell on the right, or if you are working locally, in a terminal/console window. This command creates a simple app with a single source file: Program.cs.

Azure CLI
dotnet new console -n QueueApp

$ dotnet new console -n QueueApp
[
rajani_net@Azure:~$ dotnet new console -n QueueApp

Welcome to .NET Core!
---------------------
Learn more about .NET Core: https://aka.ms/dotnet-docs
Use 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs

Telemetry
---------
The .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.

Read more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry

ASP.NET Core
------------
Successfully installed the ASP.NET Core HTTPS Development Certificate.
To trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.
For more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.
Getting ready...
The template "Console Application" was created successfully.

Processing post-creation actions...
Running 'dotnet restore' on QueueApp/QueueApp.csproj...
  Restore completed in 561.05 ms for /home/rajani_net/QueueApp/QueueApp.csproj.

Restore succeeded.

rajani_net@Azure:~$
]

2. Switch to the newly created QueueApp folder and build the app to verify that all is well.

Azure CLI
cd QueueApp
dotnet build

$ cd QueueApp
$ dotnet build
[
rajani_net@Azure:~$ cd QueueApp
rajani_net@Azure:~/QueueApp$ dotnet build
Microsoft (R) Build Engine version 16.2.32702+c4012a063 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restore completed in 43.47 ms for /home/rajani_net/QueueApp/QueueApp.csproj.
  QueueApp -> /home/rajani_net/QueueApp/bin/Debug/netcoreapp2.2/QueueApp.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:05.50
rajani_net@Azure:~/QueueApp$ ll
total 24
drwxr-xr-x 4 rajani_net rajani_net 4096 May 19 07:01 ./
drwxr-xr-x 7 rajani_net rajani_net 4096 May 19 07:00 ../
drwxr-xr-x 3 rajani_net rajani_net 4096 May 19 07:01 bin/
drwxr-xr-x 3 rajani_net rajani_net 4096 May 19 07:01 obj/
-rw-r--r-- 1 rajani_net rajani_net  190 May 19 07:00 Program.cs
-rw-r--r-- 1 rajani_net rajani_net  178 May 19 07:00 QueueApp.csproj
rajani_net@Azure:~/QueueApp$ cat Program.cs
ï»¿using System;

namespace QueueApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
rajani_net@Azure:~/QueueApp$ cat QueueApp.csproj<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.2</TargetFramework>
  </PropertyGroup>

</Project>
rajani_net@Azure:~/QueueApp$
]

# Get your connection string
Recall that your connection string is available in the Azure portal Settings > Access keys section of your storage account.

You can also retrieve it through the Azure CLI or PowerShell tools. Let's use the Azure CLI command. Remember to replace the <name> with the specific name of the storage account you created. You can use az storage account list if you need a reminder.

Azure CLI
az storage account show-connection-string --name <name> --resource-group learn-fbe5d791-54b8-403f-a0a5-26258f584781

This command will return a JSON block with your connection string. It will include the storage account name and the account key:

JSON
{
  "connectionString": "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=<name>;AccountKey=vyw6aKz2PtSAgQ4ljJQgJFgxbCETdXt39ZyYQ5fLqoBJj/gT+43TbrhoVco7Rqj/AAJVlvFORRfnYqGHiX9QcQ=="
}

$ az storage account show-connection-string --name sandboxazurequeuestorage --resource-group learn-1b06eb83-e23d-4297-b8b9-408bf017c423
[
rajani_net@Azure:~/QueueApp$ az storage account show-connection-string --name sandboxazurequeuestorage --resource-group learn-1b06eb83-e23d-4297-b8b9-408bf017c423
{
  "connectionString": "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w=="
}
rajani_net@Azure:~/QueueApp$
]

# Add the connection string to the application
Warning
For simplicity, you will place the connection string in the Program.cs file. In a production application, you should store it in a secure location. For server side use, we recommend using Azure Key Vault.

1. Type code . in the terminal to open the online code editor. Alternatively, if you are working on your own you can use the IDE of your choice. We recommend Visual Studio Code, which is an excellent cross-platform IDE.

2. Open the Program.cs source file in the project.

3. In the Program class, add a const string value to hold the connection string. You only need the value (it starts with the text DefaultEndpointsProtocol).

4. Save the file. You can click the ellipse "..." in the right corner of the cloud editor, or use the accelerator key (Ctrl+S on Windows and Linux, Cmd+S on macOS).

Your code should look something like this (the string value will be unique to your account).

C#
using System;

namespace QueueApp
{
    class Program
    {
        private const string ConnectionString = "DefaultEndpointsProtocol=https; ...";
        
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}

# Program.cs
using System;

namespace QueueApp
{
    class Program
    {
        private const string ConnectionString = "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w==";
        
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
[
rajani_net@Azure:~/QueueApp$ code .
rajani_net@Azure:~/QueueApp$ cat Program.cs
using System;

namespace QueueApp
{
    class Program
    {
        private const string ConnectionString = "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w==";

        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}rajani_net@Azure:~/QueueApp$
]