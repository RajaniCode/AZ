Server=tcp:courseserver007.database.windows.net,1433;Initial Catalog=coursedatabase007;Persist Security Info=False;User ID=azuresql;Password={your_password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;

$ git clone https://github.com/MicrosoftDocs/mslearn-develop-app-that-queries-azure-sql education
$ mv ~/education/data ~/educationdata
$ cd ~/educationdata
$ ls

$ cat courses.csv

$ cat modules.csv

$ cat studyplans.csv

SQL
CREATE TABLE Courses
(
    CourseID INT NOT NULL PRIMARY KEY,
    CourseName VARCHAR(50) NOT NULL
)

CREATE TABLE Modules
(
    ModuleCode VARCHAR(5) NOT NULL PRIMARY KEY,
    ModuleTitle VARCHAR(50) NOT NULL
)

CREATE TABLE StudyPlans
(
    CourseID INT NOT NULL,
    ModuleCode VARCHAR(5) NOT NULL,
    ModuleSequence INT NOT NULL,
    PRIMARY KEY(CourseID, ModuleCode)
)

Import the data
1. Return to the Cloud Shell window, and make sure that you're in the educationdata folder.
$ cd ~/educationdata

2. Create the variables that you will use in the later steps. Replace NNN with the number that you used for your database and server.
$ export DATABASE_NAME=coursedatabaseNNN
$ export DATABASE_SERVER=courseserverNNN
$ export AZURE_USER=azuresql
$ export AZURE_PASSWORD=Azure@123

3. Run the bcp utility to create a format file from the schema of the Courses table in the database. The format file specifies that the data will be in character format (-c) and separated by commas (-t,).
$ bcp "$DATABASE_NAME.dbo.courses" format nul -c -f courses.fmt -t, -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD

4. In the code editor, open the format file, courses.fmt, that was generated by the previous command.
$ code courses.fmt

The file should look like this:
14.0
2
1       SQLCHAR             0       12      ","    1     CourseID                                     ""
2       SQLCHAR             0       50      "\n"   2     CourseName                                   SQL_Latin1_General_CP1_CI_AS

5. Review the file. The data in the first column of the comma-separated file will go into the CourseID column of the Courses table. The second field will go into the CourseName column. The second column is character-based and has a collation that's associated with it. The fields separator in the file is expected to be a comma. The row terminator (after the second field) should be a newline character. In a real-world scenario, your data might not be organized this neatly. You might have different field separators and fields in a different order from the columns. In that situation, you can edit the format file to change these items on a field-by-field basis. Press Ctrl+q to close the editor.

6. Run the following command to import the data in the courses.csv file in the format that's specified by the amended courses.fmt file. The -F 2 flag directs the bcp utility to start importing data from line 2 in the data file. The first line contains headers.
$ bcp "$DATABASE_NAME.dbo.courses" in courses.csv -f courses.fmt -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD -F 2
Verify that bcp utility imports 9 rows and doesn't report any errors.
[
SELECT * FROM dbo.Courses
]

7. Run the following sequence of operations to import the data for the dbo.Modules table from the modules.csv file.
a. Generate a format file.
$ bcp "$DATABASE_NAME.dbo.modules" format nul -c -f modules.fmt -t, -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD

b. Import the data from the modules.csv file into the Modules table in the database.
$ bcp "$DATABASE_NAME.dbo.modules" in modules.csv -f modules.fmt -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD -F 2
Verify that this command imports 16 rows.
[
SELECT * FROM dbo.Modules
]

8. Perform the following sequence of operations to import the data for the dbo.StudyPlans table from the studyplans.csv file.
a. Generate a format file.
$ bcp "$DATABASE_NAME.dbo.studyplans" format nul -c -f studyplans.fmt -t, -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD

b. Import the data from the studyplans.csv file into the StudyPlans table in the database.
$ bcp "$DATABASE_NAME.dbo.studyplans" in studyplans.csv -f studyplans.fmt -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD -F 2
Verify that this command imports 45 rows.
[
SELECT * FROM dbo.studyplans
]

Cloud Shell, and run the following command to connect to the database.
$ sqlcmd -S "$DATABASE_SERVER.database.windows.net" -d "$DATABASE_NAME" -U $AZURE_USER -P $AZURE_PASSWORD

At the 1> prompt, enter the following SQL command to fetch the data from the StudyPlans table.
1> SELECT * FROM StudyPlans;  
2> GO
This query should return 45 rows.
3> exit


Deploy and run the pre-existing web app
1. Change your working directory to the education folder.
$ cd ~/education

2. Run the following commands to build and deploy the initial web app.
$ WEBAPPNAME=educationapp-$RANDOM
az webapp up \
    --resource-group learn-6ecb67a8-765d-4bbe-ae9a-37d1ef571fbd \
    --location centralus \
    --sku F1 \
    --name $WEBAPPNAME

3. When the web application has been deployed, the output will show an App_url with the URL of the web site. Open this site in a new tab.

http://educationapp-7313.azurewebsites.net

You want the web app to display a list of courses and the modules that make up each course. Currently, the app doesn't retrieve or display this data. So, you need to update the code to get the data from the database and display it.


Add code to the web app to retrieve data
Now let's add to the application the code to retrieve course data from the database.

1. In Cloud Shell, go to the education/Models folder.
$ cd ~/education/Models
This folder contains two files, CoursesAndModules.cs and DataAccessController.cs.
[
$ ls
CoursesAndModules.cs  DataAccessController.cs
]

2. Use the code editor to open the CoursesAndModules.cs file.
$ code CoursesAndModules.cs
This file contains an empty class that's named CoursesAndModules.
namespace CoursesWebApp.Models
{
    public class CoursesAndModules
    {
        // TODO: Define the CourseName, ModuleTitle, and Sequence read-only properties

        // TODO: Create a constructor that initializes the fields behind the properties
    }
}

3. Replace the comment // TODO: Define the CourseName, ModuleTitle, and Sequence read-only properties with the following code.
public string CourseName { get; }
public string ModuleTitle { get; }
public int Sequence { get; }
This code defines a set of read-only fields that will contain the data for each row that's displayed by the web app.

4. Replace the comment // TODO: Create a constructor that initializes the fields behind the properties with the following constructor.
public CoursesAndModules(string courseName, string moduleTitle, int sequence)
{
    this.CourseName = courseName;
    this.ModuleTitle = moduleTitle;
    this.Sequence = sequence;
}
This constructor populates the fields with the data to display. The complete file should contain the following code.
namespace CoursesWebApp.Models
{
    public class CoursesAndModules
    {
        public string CourseName { get; }
        public string ModuleTitle { get; }
        public int Sequence { get; }

        public CoursesAndModules(string courseName, string moduleTitle, int sequence)
        {
            this.CourseName = courseName;
            this.ModuleTitle = moduleTitle;
            this.Sequence = sequence;
        }
    }
}

5. Save the file, and close the code editor.

6. Use the code editor to open the DataAccessController.cs file.
$ code DataAccessController.cs
This file contains a class that's named DataAccessController. This class will contain the data access logic to connect to the database and retrieve the course and module data. It will populate a list of CoursesAndModules objects with this data.
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace CoursesWebApp.Models
{
    public class DataAccessController
    {
        // TODO: Add your connection string in the following statements
        private string connectionString = "<Azure SQL Database Connection String>";

        // Retrieve all details of courses and their modules
        public IEnumerable<CoursesAndModules> GetAllCoursesAndModules()
        {
            List<CoursesAndModules> courseList = new List<CoursesAndModules>();

            // TODO: Connect to the database
            //using ()
            {
                // TODO: Specify the SQL query to run

                // TODO: Execute the query

                // TODO: Read the data a row at a time

                // TODO: Close the database connection
            }
            return courseList;
        }
    }
}

7. Leave the code editor open, and switch to the Azure portal.

8. On the Azure portal menu, select SQL databases, and select your database.

9. Under Settings, select Connection strings. Copy the ADO.NET connection string to the clipboard.
[
Server=tcp:courseserver007.database.windows.net,1433;Initial Catalog=coursedatabase007;Persist Security Info=False;User ID=azuresql;Password={your_password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
]
Server=tcp:courseserver007.database.windows.net,1433;Initial Catalog=coursedatabase007;Persist Security Info=False;User ID=azuresql;Password=Azure@123;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;

10. Return to the code editor. Replace the value of the connectionString variable with the value from the clipboard. In the connection string, replace the text {your_username} with the value azuresql. And replace the text {your_password} with the password for this account.
[
private string connectionString = "Server=tcp:courseservernnn.database.windows.net,1433;Initial Catalog=coursedatabasennn;Persist Security Info=False;User ID=azuresql;Password=<password>;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";
]
private string connectionString = "Server=tcp:courseserver007.database.windows.net,1433;Initial Catalog=coursedatabase007;Persist Security Info=False;User ID=azuresql;Password=Azure@123;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";

11. After the comment //TODO: Connect to the database, replace the commented-out using statement with the following code.
using (SqlConnection con = new SqlConnection(connectionString))
This code creates a new SqlConnection object that uses your connection string to connect to the database.

12. Replace the comment // TODO: Specify the SQL query to run with the following statements.
SqlCommand cmd = new SqlCommand(
    @"SELECT c.CourseName, m.ModuleTitle, s.ModuleSequence
    FROM dbo.Courses c JOIN dbo.StudyPlans s
    ON c.CourseID = s.CourseID
    JOIN dbo.Modules m
    ON m.ModuleCode = s.ModuleCode
    ORDER BY c.CourseName, s.ModuleSequence", con);
cmd.CommandType = CommandType.Text;
The SqlCommand object contains an SQL statement that retrieves the data for all courses and modules. It joins them by using the information in the StudyPlan table.

13. Replace the comment // TODO: Execute the query with the following code.
con.Open();
SqlDataReader rdr = cmd.ExecuteReader();
These statements open the connection to the database and run the SQL statement. You can use the SqlDataReader object to fetch the results one row at a time.

14. Replace the comment // TODO: Read the data a row at a time with the following block of code.
while (rdr.Read())
{
    string courseName = rdr["CourseName"].ToString();
    string moduleTitle = rdr["ModuleTitle"].ToString();
    int moduleSequence = Convert.ToInt32(rdr["ModuleSequence"]);
    CoursesAndModules course = new CoursesAndModules(courseName, moduleTitle, moduleSequence);
    courseList.Add(course);
}
This block iterates through the rows that are returned in the SqlDataReader object. The code extracts the data in the fields in each row and uses them to populate a new CoursesAndModules object. This object is then added to a list.

15. Replace the comment // TODO: Close the database connection with the following statement.
con.Close();
This statement closes the connection to the database and releases any resources that were held.

16. The completed class should contain the following code, which includes the connection string for your database.
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace CoursesWebApp.Models
{
    public class DataAccessController
    {
        // Add your connection string in the following statements
        private string connectionString = "Server=tcp:courseserver101.database.windows.net,1433;Initial Catalog=coursedatabase101;Persist Security Info=False;User ID=azuresql;Password=<password>;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";

        // Retrieve all details of courses and their modules    
        public IEnumerable<CoursesAndModules> GetAllCoursesAndModules()
        {
            List<CoursesAndModules> courseList = new List<CoursesAndModules>();

            // Connect to the database
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                // Specify the SQL query to run
                SqlCommand cmd = new SqlCommand(
                    @"SELECT c.CourseName, m.ModuleTitle, s.ModuleSequence
                    FROM dbo.Courses c JOIN dbo.StudyPlans s
                    ON c.CourseID = s.CourseID
                    JOIN dbo.Modules m
                    ON m.ModuleCode = s.ModuleCode
                    ORDER BY c.CourseName, s.ModuleSequence", con);
                cmd.CommandType = CommandType.Text;

                // Execute the query
                con.Open();
                SqlDataReader rdr = cmd.ExecuteReader();

                // Read the data a row at a time
                while (rdr.Read())
                {
                    string courseName = rdr["CourseName"].ToString();
                    string moduleTitle = rdr["ModuleTitle"].ToString();
                    int moduleSequence = Convert.ToInt32(rdr["ModuleSequence"]);
                    CoursesAndModules course = new CoursesAndModules(courseName, moduleTitle, moduleSequence);
                    courseList.Add(course);
                }

                // Close the database connection
                con.Close();
            }
            return courseList;
        }
    }
}
Save the file, and close the Code editor.

Add code to the web app to display the data
The application can now retrieve the course data. Now, update the app to display the data to the user.

1. In Cloud Shell, move to the education/Pages folder.
$ cd ~/education/Pages
This folder contains the .cshtml pages and code files that the web app uses to display information.
[
ls
About.cshtml       Error.cshtml     Privacy.cshtml       _ViewStart.cshtml
About.cshtml.cs    Error.cshtml.cs  Privacy.cshtml.cs
Contact.cshtml     Index.cshtml     Shared
Contact.cshtml.cs  Index.cshtml.cs  _ViewImports.cshtml
]

2. Use the code editor to open the Index.cshtml.cs file.
$ code Index.cshtml.cs
This file contains code that the index page runs when it's displayed. The code defines a class CoursesAndModulesModel. The index page will use this model to display the details of courses and modules. In this file, you need to add the code that uses a DataAccessController object to fetch that data.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CoursesWebApp.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace CoursesWebApp.Pages
{
    public class CoursesAndModulesModel : PageModel
    {
        // TODO: Create a DataAccessController object

        // TODO: Create a collection for holding CoursesAndModules object

        public void OnGet()
        {
            // TODO: Retrieve the data using the DataAccessController object and populate the CoursesAndModules object
        }
    }
}

3. In Index.cshtml.cs, replace the comment // TODO: Create a DataAccessController object with the following code to create a new DataAccessController object.

