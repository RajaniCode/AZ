# Add a message to the queue
Add the client library for Azure Storage
Let's start by adding the Azure Storage Client Library for .NET to our app. It can be installed with NuGet (a .NET package manager).

1. Install the WindowsAzure.Storage package to the project with the dotnet add package command. You can do this in the terminal window below the Cloud Shell, or if you are working on your local computer, in a terminal/console window in the same folder as the project.

Azure CLI
dotnet add package WindowsAzure.Storage

$ dotnet add package WindowsAzure.Storage
[
rajani_net@Azure:~/QueueApp$ dotnet add package WindowsAzure.Storage
  Writing /tmp/tmpb4rRRs.tmp
info : Adding PackageReference for package 'WindowsAzure.Storage' into project '/home/rajani_net/QueueApp/QueueApp.csproj'.
info : Restoring packages for /home/rajani_net/QueueApp/QueueApp.csproj...
info :   GET https://api.nuget.org/v3-flatcontainer/windowsazure.storage/index.json
info :   OK https://api.nuget.org/v3-flatcontainer/windowsazure.storage/index.json 850ms
info :   GET https://api.nuget.org/v3-flatcontainer/windowsazure.storage/9.3.3/windowsazure.storage.9.3.3.nupkg
info :   OK https://api.nuget.org/v3-flatcontainer/windowsazure.storage/9.3.3/windowsazure.storage.9.3.3.nupkg 3ms
info :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json
info :   OK https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json 852ms
info :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/10.0.2/newtonsoft.json.10.0.2.nupkg
info :   OK https://api.nuget.org/v3-flatcontainer/newtonsoft.json/10.0.2/newtonsoft.json.10.0.2.nupkg 6ms
info : Installing Newtonsoft.Json 10.0.2.
info : Installing WindowsAzure.Storage 9.3.3.
info : Package 'WindowsAzure.Storage' is compatible with all the specified frameworks in project '/home/rajani_net/QueueApp/QueueApp.csproj'.
info : PackageReference for package 'WindowsAzure.Storage' version '9.3.3' added to file '/home/rajani_net/QueueApp/QueueApp.csproj'.
info : Committing restore...
info : Generating MSBuild file /home/rajani_net/QueueApp/obj/QueueApp.csproj.nuget.g.props.
info : Writing assets file to disk. Path: /home/rajani_net/QueueApp/obj/project.assets.json
log  : Restore completed in 5.44 sec for /home/rajani_net/QueueApp/QueueApp.csproj.
rajani_net@Azure:~/QueueApp$
]

# Add a method to send a news alert
Next, let's create a new method to send a news story into a queue.

1. Open the Program.cs file in your code editor.
 
2. At the top of the file, add the following namespaces. We'll be using types from both of these to connect to Azure Storage and then to work with queues.

• System.Threading.Tasks
• Microsoft.WindowsAzure.Storage
• Microsoft.WindowsAzure.Storage.Queue

3. Create a static method in the Program class named SendArticleAsync that takes a string and returns a Task. We'll use this method to send a news article in to our service. Name the input parameter newsMessage as shown below.

C#
...
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Queue; 

class Program
{
    ...

    static async Task SendArticleAsync(string newsMessage)
    {
    }
}

4. In your new method, use the static CloudStorageAccount.Parse method to parse your connection string (recall we placed it into a constant string). This method returns a CloudStorageAccount object that needs to be stored in a variable.

5. Call the CreateCloudQueueClient() method on the storage account object to get a client object and store that in a variable.

6. Next, call GetQueueReference method on the client object and pass the string "newsqueue" for the queue name. This returns a CloudQueue object that we can use to work with the queue. It's OK if the queue does not exist yet.

7. Call CreateIfNotExistsAsync() on the CloudQueue object to ensure the queue is ready for use. This will create the queue if necessary.

• Since this is an asynchronous method, use the C# await keyword to ensure we work properly with it. That also means you need to decorate the method with the async keyword.
• CreateIfNotExistsAsync returns a bool value that will be true if the queue was created and false if it already exists. Output a message to the console if we created the queue.
• Here's an example if you need some help.

C#
static async Task SendArticleAsync(string newsMessage)
{
    // Not Shown here - code from prior steps
    ...
    bool createdQueue = await queue.CreateIfNotExistsAsync();
    if (createdQueue)
    {
        Console.WriteLine("The queue of news articles was created.");
    }
}

8. Create an instance of a CloudQueueMessage.

• It takes a string parameter, pass in the method parameter (newsMessage). This will be the body of the message. There is also a static method named that can create a binary message payload.

9. Call AddMessageAsync on the CloudQueue object to add the message to the queue. This is also an asynchronous method and you will need to use the await keyword to ensure we properly interact with it.

10. Save the file and build it by typing dotnet build into the command window. Fix any errors, you can use the following code to check your work.

C#
static async Task SendArticleAsync(string newsMessage)
{
    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(ConnectionString);

    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

    CloudQueue queue = queueClient.GetQueueReference("newsqueue");
    bool createdQueue = await queue.CreateIfNotExistsAsync();
    if (createdQueue)
    {
        Console.WriteLine("The queue of news articles was created.");
    }

    CloudQueueMessage articleMessage = new CloudQueueMessage(newsMessage);
    await queue.AddMessageAsync(articleMessage);
}

Add code to send a message
Let's modify the Main method to pass any parameters received into our new method so we can test our new send method.

1. Locate the Main method.

2. Check the passed args parameter to see if any data was passed to the command line. If so, use String.Join to create a single string from all the words using a space as the separator.

3. Pass that to the new SendArticleAsync method.

4. Once it returns, use Console.WriteLine to output the message we sent.

5. Save the file and build the program (dotnet build), you can use the code below to check your work.

Note
Since our method is technically asynchronous, we will want to use the await keyword, however that feature isn't available on your Main method unless you are using C# 7.1 or later. Just call Wait() on the method to actually block waiting for the method to return, we'll fix that in a minute.

C#
static void Main(string[] args)
{
    if (args.Length > 0)
    {
        string value = String.Join(" ", args);
        SendArticleAsync(value).Wait();
        Console.WriteLine($"Sent: {value}");
    }
}

# Program.cs
using System;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Queue; 

namespace QueueApp
{
    class Program
    {
        private const string ConnectionString = "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w==";

        static void Main(string[] args)
        {
            if (args.Length > 0)
            {
                string value = String.Join(" ", args);
                SendArticleAsync(value).Wait();
                Console.WriteLine($"Sent: {value}");
            }
        }

        static async Task SendArticleAsync(string newsMessage)
        {
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(ConnectionString);

            CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

            CloudQueue queue = queueClient.GetQueueReference("newsqueue");
            bool createdQueue = await queue.CreateIfNotExistsAsync();
            if (createdQueue)
            {
                Console.WriteLine("The queue of news articles was created.");
            }

            CloudQueueMessage articleMessage = new CloudQueueMessage(newsMessage);
            await queue.AddMessageAsync(articleMessage);
        }
    }
}

$ code .
$ cat Program.cs
[
rajani_net@Azure:~/QueueApp$ code .
rajani_net@Azure:~/QueueApp$ cat Program.cs
using System;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Queue;

namespace QueueApp
{
    class Program
    {
        private const string ConnectionString = "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w==";

        static void Main(string[] args)
        {
            if (args.Length > 0)
            {
                string value = String.Join(" ", args);
                SendArticleAsync(value).Wait();
                Console.WriteLine($"Sent: {value}");
            }
        }

        static async Task SendArticleAsync(string newsMessage)
        {
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(ConnectionString);

            CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

            CloudQueue queue = queueClient.GetQueueReference("newsqueue");
            bool createdQueue = await queue.CreateIfNotExistsAsync();
            if (createdQueue)
            {
                Console.WriteLine("The queue of news articles was created.");
            }

            CloudQueueMessage articleMessage = new CloudQueueMessage(newsMessage);
            await queue.AddMessageAsync(articleMessage);
        }
    }
}rajani_net@Azure:~/QueueApp$
]

# Execute the application
The application can now send messages. To test it, you can run it from the command line with the dotnet run command. Any additional strings are passed as parameters to the application.
Warning

Make sure you have saved all the files in the online editor before you build and run the program.

$ dotnet run
[
rajani_net@Azure:~/QueueApp$ dotnet run
rajani_net@Azure:~/QueueApp$
]

As an example, you can type:

Azure CLI
dotnet run Send this message

This should add the string "Send this message" into the queue.

$ dotnet run Send this message
[
rajani_net@Azure:~/QueueApp$ dotnet run Send this message
The queue of news articles was created.
Sent: Send this message
rajani_net@Azure:~/QueueApp$
]

Check your results
You can check queues in the Azure portal using the Storage Explorer, if you open that product it will let you explore the data in each storage account you own.

Alternatively, you can use the Azure CLI or PowerShell. Try this command in the shell, replacing the <connection-string> value with your specific connection string:

Azure CLI
az storage message peek --queue-name newsqueue --connection-string <connection-string>

This should dump the information for your message, which will look something like this:
JSON
[
  {
    "content": "U2VuZCB0aGlzIG1lc3NhZ2U=",
    "dequeueCount": 0,
    "expirationTime": "2018-09-05T02:43:40+00:00",
    "id": "b47cbe9f-a246-4a81-86ae-fa02ea8d98bc",
    "insertionTime": "2018-09-24T02:43:40+00:00",
    "popReceipt": null,
    "timeNextVisible": null
  }
]

There are several other commands available that you can try with the tools - check out both az storage queue --help and az storage message --help to explore them.

Tip
Put your connection string value into an environment variable named AZURE_STORAGE_CONNECTION_STRING to save yourself from having to type the --connection-string parameter every time!

$ az storage message peek --queue-name newsqueue --connection-string "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w=="
[
rajani_net@Azure:~/QueueApp$ az storage message peek --queue-name newsqueue --connection-string "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w=="
[
  {
    "content": "U2VuZCB0aGlzIG1lc3NhZ2U=",
    "dequeueCount": 0,
    "expirationTime": "2020-05-26T07:16:45+00:00",
    "id": "4554cbc6-0a91-4376-a047-aa4d1a63cde9",
    "insertionTime": "2020-05-19T07:16:45+00:00",
    "popReceipt": null,
    "timeNextVisible": null
  }
]
rajani_net@Azure:~/QueueApp$
]

# Switch to C# 7.1
C#'s async and await keywords were not valid keywords in Main methods until C# 7.1. We can easily switch to that compiler through a flag in the .csproj file.

1. Open the QueueApp.csproj file in the editor.

2. Add <LangVersion>7.1</LangVersion> into the first PropertyGroup in the build file. It should look like the following when you are finished.

XML
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.2</TargetFramework>
    <LangVersion>7.1</LangVersion> 
  </PropertyGroup>
...

# Apply the async keyword
Next, apply the async keyword to the Main method. We will have to do three things.

1. Add the async keyword onto the Main method signature.
2. Change the return type from void to Task.
3. Remove the call to Wait() on the call to SendArticleAsync and replace it with await.

Try running the app again - it should still work exactly as before, but now the code is able to release the thread back to the .NET threadpool while we wait for the message to be queued.

Now that we have sent a message, the last step is to add support to receive the message.

# QueueApp.csproj
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.2</TargetFramework>
    <LangVersion>7.1</LangVersion> 
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="WindowsAzure.Storage" Version="9.3.3" />
  </ItemGroup>

</Project>

# Program.cs
using System;
using System.Threading.Tasks;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Queue; 

namespace QueueApp
{
    class Program
    {
        private const string ConnectionString = "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w==";

        static async Task Main(string[] args)
        {
            if (args.Length > 0)
            {
                string value = String.Join(" ", args);
                await SendArticleAsync(value);
                Console.WriteLine($"Sent: {value}");
            }
        }

        static async Task SendArticleAsync(string newsMessage)
        {
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(ConnectionString);

            CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

            CloudQueue queue = queueClient.GetQueueReference("newsqueue");
            bool createdQueue = await queue.CreateIfNotExistsAsync();
            if (createdQueue)
            {
                Console.WriteLine("The queue of news articles was created.");
            }

            CloudQueueMessage articleMessage = new CloudQueueMessage(newsMessage);
            await queue.AddMessageAsync(articleMessage);
        }
    }
}

$ code .
$ cat QueueApp.csproj
$ cat Program.cs
$ dotnet run
$ dotnet run Send this message
[
rajani_net@Azure:~/QueueApp$ code .
rajani_net@Azure:~/QueueApp$ cat QueueApp.csproj<Project Sdk="Microsoft.NET.Sdk">  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.2</TargetFramework>
    <LangVersion>7.1</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="WindowsAzure.Storage" Version="9.3.3" />
  </ItemGroup>

</Project>
rajani_net@Azure:~/QueueApp$ cat Program.csusing System;using System.Threading.Tasks;using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Queue;

namespace QueueApp
{
    class Program
    {
        private const string ConnectionString = "DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=sandboxazurequeuestorage;AccountKey=Iu9ut9D6Zb4F02PBII38LI2iuIvfPyug/YTgRy1E1Gf/JN00wScCx3RXABMB2Khuk/LbTwaO4YZVAHK2XyP24w==";

        static async Task Main(string[] args)
        {
            if (args.Length > 0)
            {
                string value = String.Join(" ", args);
                await SendArticleAsync(value);
                Console.WriteLine($"Sent: {value}");
            }
        }

        static async Task SendArticleAsync(string newsMessage)
        {
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(ConnectionString);

            CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

            CloudQueue queue = queueClient.GetQueueReference("newsqueue");
            bool createdQueue = await queue.CreateIfNotExistsAsync();
            if (createdQueue)
            {
                Console.WriteLine("The queue of news articles was created.");
            }

            CloudQueueMessage articleMessage = new CloudQueueMessage(newsMessage);
            await queue.AddMessageAsync(articleMessage);
        }
    }
}rajani_net@Azure:~/QueueApp$dotnet run
rajani_net@Azure:~/QueueApp$ dotnet run Send this message
Sent: Send this message
rajani_net@Azure:~/QueueApp$
]